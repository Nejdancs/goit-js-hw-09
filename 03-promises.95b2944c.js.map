{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,UAAWF,SAASC,cAAc,0BA4CpC,SAASE,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,UAAEH,QAAUC,IAEpBG,EAAO,UAAEJ,QAAUC,MAEpBA,MAjDPP,EAAKC,KAAKc,iBAAiB,UAE3B,SAAkBC,GAChBA,EAAEC,iBACFjB,EAAKI,UAAUc,UAAW,EAE1B,MACEC,QAhBJZ,MAgBca,EAhBdC,KAgBqBA,EAhBrBC,OAgB2BA,IACrBN,EAEJ,IAAIO,EAAWC,OAAOJ,EAAMK,OAC5B,MAAMC,EAAUF,OAAOH,EAAKI,OACtBE,EAAYH,OAAOF,EAAOG,OAEhC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAWC,GAAK,EAAGL,GAAYG,EAC9CE,IAAMD,GAmBZb,YAAW,KACTd,EAAKI,UAAUc,UAAW,IAnBdK,EAlBK,KAqBjBlB,EAAcuB,EAAGL,GACdM,MAAK,EA7BZvB,SA6BeA,EA7BfC,MA6ByBA,MACjBT,EAAAgC,OAAOC,QAAQ,qBAAqBzB,QAAeC,MAAW,CAC5DyB,QAxBW,SA2BdC,OAAM,EAlCb3B,SAkCgBA,EAlChBC,MAkC0BA,MAClBT,EAAAgC,OAAOI,QAAQ,oBAAoB5B,QAAeC,MAAW,CAC3DyB,QA7BW","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  submitBtn: document.querySelector('button[type=\"submit\"]'),\n};\n\nconst timeoutAlert = 3000;\n\nrefs.form.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  refs.submitBtn.disabled = true;\n\n  const {\n    target: { delay, step, amount },\n  } = e;\n\n  let delayVal = Number(delay.value);\n  const stepVal = Number(step.value);\n  const amountVal = Number(amount.value);\n\n  for (let i = 1; i <= amountVal; i += 1, delayVal += stepVal) {\n    if (i === amountVal) {\n      UnlockBtn(delayVal);\n    }\n\n    createPromise(i, delayVal)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`, {\n          timeout: timeoutAlert,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`, {\n          timeout: timeoutAlert,\n        });\n      });\n  }\n}\n\nfunction UnlockBtn(delay) {\n  setTimeout(() => {\n    refs.submitBtn.disabled = false;\n  }, delay + timeoutAlert);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","submitBtn","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","disabled","target","delay1","step","amount","delayVal","Number","value","stepVal","amountVal","i","then","Notify","success","timeout","catch","failure"],"version":3,"file":"03-promises.95b2944c.js.map"}